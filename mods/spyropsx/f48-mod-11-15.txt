###################################
Стр.11:


>> aleksusklim: 
WAD структура. Вы читали начало темы, где я как раз её описывал?

Короче… Если быстро.
Есть файл. Он как бы архив без сжатия. Имеет заголовок – таблицу размещения и последовательно перечисленные файлы без имён, только с порядковым номером.
Файлы описываются следующим образом:
Первые четыре байта заголовка (unsigned integer pointer DWORD little-endian – называйте как хотите) обозначают адрес первого СУБФАЙЛА (субфайлом называем заархивированный файл) в пространстве WAD. То есть это по сути размер самой шапки.
Следующие четыре байта – размер первого субфайла.
Третья четвёрка – адрес начало второго субфайла. Обычно равен {адрес предыдущего + размер предыдущего}
Ещё четвёрка – его размер.
И так до тех пор, пока мы не считаем количество байт шапки (значение первой четвёрки) или пока тупо одно из чисел не будет равно нулю.

Ошибки:
– Адрес[n]+Размер[n] не равен Адрес[n+1];
– Адрес[n] больше чем Адрес[n+1];
– Адрес[n]+Размер[n] больше объёма WAD.
– Адрес[n] меньше чем Текущий считываемый байт шапки, но не Ноль.
– Адрес[n] больше нуля, а Размер[n] равен нулю.

Все эти ошибки нефатальные, то есть извлечение можно продолжать, игнорируя их.
Также WAD может не содержать размеров, а только адреса.

...

«GGGR-RRRR=0BBB-BBGG»
Вы понимаете ЭТО? Я, например, с трудом. Я взял пять зелёных карандашей, пять красных, пять синих и один простой, чтобы имитировать 16 бит. Пытался по-разному разложить их на столе, чтобы получить УПОРЯДОЧЕННУЮ структуру формата цвета. Для меня это RGB. Красный-зелёный-синий. Стандарт. Почему нет?
Смотрим, как ЧИТАЮТСЯ биты.
1) Берём ПЕРВЫЙ байт.
2) Считываем биты С КОНЦА к началу.
3) Берём ВТОРОЙ байт.
4) Считываем биты С КОНЦА к началу.

Я записал RRRRRGGGGGBBBBB0 в таком формате:
«GGGR-RRRR=0BBB-BBGG». Иллюстрация по шагам (по четыре бита в каждом шаге):
1) – RRRR
2) – RRRR-RGGG
3) – RRRR-RGGG=GGBB
4) – RRRR-RGGG=GGBB-BBB0.
Вот и вся техника.
И прямо в этот миг появился PVV! Я создал две мега-палитры (массивы записи двухбайтовых целых в big-endian и little-endian). Попробовал на них – работает. Сам набрал некую последовательность битов в WinHex (через Data Interpreter) и предсказал цвет. Результат полностью подтвердился.

###################################
Стр.12:

>> ViToTiV:
Quote (aleksusklim)
Ищет ли ваша программа звук? Ну по «02h» в каждой строке из 16 байт или ещё как-нибудь?

да, именно так, если 02 повторяется через каждые 16 байт в блоке длинной 2048 байт, то это считается звуком. завтра скину исходник на дельфи
(прим. steeldragon - речь идёт о звуках из первого субфайла уровня)

###################################
Стр.13:

>> brill:
Палитры находятся сразу за шрифтом (в данном примере я рассматриваю файл 007.bin)
1 палитра - 301120 (Шрифт)
2 палитра - 302144 (кнопки /\ [] O X)

...

nihonjin, в файле 003.bin есть какой-то японский шрифт. Глянь оно?!
http://i44.fastpic.ru/big/2012/1015/92/3ae5503119ad21d31ab5b55cb28f3d92.png

>> nihonjin:
Quote (brill)
в файле 003.bin есть какой-то японский шрифт. Глянь оно?!

Да, это то, что надо
...
Ого, только что заметил, что и в европейской/американской версии Spyro2 тоже есть японский шрифт:
http://nihonjinryuu.narod2.ru/pvv2.png
Чудеса!

###################################
Стр.14:

>> brill:
в первой части 3д шрифт похоже находится в 009 файле (в конце). анализировать не буду. но место для раскопок я дал.

###################################
Стр.15:

-ничего полезного-
